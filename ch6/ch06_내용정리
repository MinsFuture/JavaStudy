ch06 - 클래스
6.1 객체 지향 프로그래밍
객체란 물리적으로 존재하거나 개념적인 것 중에서 다른 것과 식별가능한 것을 말한다.
객체는 속성과 동작으로 구성되는데, 예를 들면 사람은 이름, 나이 등의 속성과 걷다, 웃다 등의 동작이 있다.
자바에서는 이러한 속성을 필드, 동작을 메소드라고 부른다
현실 세계에서 어떤 제품을 만들때는 부품을 하나 만들고, 이것들을 조립해서 완제품을 만든다.
소프트웨어를 개발할 때도 여러 객체들을 먼저 만들고, 객체들을 하나씩 조립해서 하나의 프로그램을 만드는 방식을 객체 지향 프로그래밍이라고 한다.

객체간의 상호작용은 메소드 호출을 통해 일어난다. 메소드의 매개값으로 전달하고자 하는 데이터를 주고, 리턴값으로 메소드의 실행 결과를 리턴한다.
객체간의 관계 종류에서는 집합 관계, 사용 관계, 상속 관계가 있다.
집합 관계는 자동차와 타이어의 관계, 사용 관계는 사람과 자동차의 관계, 상속 관계는 기계와 자동차의 관계를 생각하면 쉽다.

객체 지향 프로그래밍의 가장 큰 특징들은 캡슐화, 상속, 다형성 등이 있다.
캡슐화(Encapsulation)란 데이터(필드), 동작(메소드)를 하나로 묶고 실제 구현 내용을 외부에 감추는 것을 말한다.
외부 객체는 객체 내부의 구조를 모르며, 객체가 노출해서 제공하는 필드와 메소드만 사용할 수 있다.
자바는 캡슐화된 멤버를 노출시킬 것인지 숨길 것인지를 접근 제한자를 사용해서 결정한다.

상속이란 부모 역할의 상위 객체와 자식 역할의 하위 객체가 있는데, 이때 부모 객체가 자식 객체에게 자신이 가지고 있는 필드와 메소드를
물려주는 것을 말한다. 이러한 상속의 장점은 코드의 중복사용은 줄여주고, 유지 보수를 쉽게한다.

다형성(Polymorphism)이란 사용 방법은 동일하지만 실행 결과는 다르게 나오는 것을 말한다.
자바에서는 다형성을 자동 타입 변환과 Override를 사용해서 구현한다.

6.2 객체와 클래스
객체 지향 프로그래밍에서 객체를 생성하기 위해 필요한 설계도를 클래스(Class)라고 말한다.
이러한 클래스로 부터 생성된 객체를 인스턴스(Instance)라고한다.
동일한 클래스로부터 여러 개의 인스턴스를 만들 수 있다.

6.3 클래스 선언
클래스 선언에는 어떻게 객체를 생성(생성자)하고, 객체가 가져야 할 데이터(필드)는 무엇이고, 객체의 동작(메소드)는 무엇인지를 정의하는 내용이 포함된다.
.java 파일명과 public class의 클래스명은 같아야한다. 하나의 자바 파일에 여러개의 클래스를 선언할 수는 있지만, 일반적으로 하나의 클래스만을 선언한다.

6.4 객체 생성과 클래스 변수
클래스로부터 객체를 생성할려면, 객체 생성 연산자인 new가 필요하다.
new 연산자 뒤에는 생성자 호출 코드가 오는데, 이 생성자는 클래스() 형태를 가진다.
new 연산자는 객체를 생성시킨 후 객체의 주소를 리턴하기 때문에, 다음과 같은 형태로 사용한다.
클래스 변수 = new 클래스();

6.5 클래스의 구성 멤버
클래스는 필드, 생성자, 메소드로 이루어져 있다.

필드는 객체의 데이터를 저장하는 역할을 한다. 변수 선언과 비슷하지만, 그 쓰임새는 완전히 다르다.
생성자는 클래스명과 동일하며, new 연산자로 호출하여 객체의 초기화를 담당한다.
선언 형태는 메소드와 비슷하지만, 리턴 타입이 없다.
메소드는 객체가 수행할 동작이다. 다른 프로그래밍 언어에서는 함수라고 하기도 하는데, 자바에서는 메소드라고 한다.

6.6 필드 선언과 사용
<필드 선언>
필드를 선언하는 방법은 변수 선언 방법과 동일하나, 클래스 블록에서 선언되어야 한다.
변수와 차이점은, 변수의 경우 생성자와 메소드 블록 내부에서만 선언되고 사용되지만
필드의 경우 클래스에서 선언되어서, 객체 내외부 어디서든 사용가능 하다.
필드의 타입은 데이터의 종류를 결정하는데, 앞에서 언급했던 기본 타입이나 참조 타입 모두 가능하다.
필드는 초기화하지 않으면, 자동으로 자바에서 설정한 초기값으로 초기화된다.

<필드 사용>
필드를 사용한다는 것은 필드값을 읽고 변경하는 것을 말한다.
이러한 필드는 객체의 데이터이므로, 객체가 존재하지 않으면 필드도 존재하지 않는다.
객체를 생성하고 난 뒤에는, 겍체 내부의 생성자와 메소드는 물론 객체 외부에서도 접근해서 사용할 수 있다(물론 접근 제한자에 따라 제한이 있을 수 있다)
객체 내부에서는 단순히 필드명으로 읽고 변경할 수 있지만, 외부 객체에서는 참조 변수와 도트연산자를 이용해서 접근한다.

6.7 생성자 선언과 호출
new 연산자는 객체를 생성한 후 연이어 생성자를 호출해서 객체를 초기화 시키는 역할을 한다.
생성자가 성공적으로 실행되면, 초기화 된 객체의 주소를 리턴한다.
리턴된 주소는 클래스 변수에 대입되어 객체의 필드나 메소드에 접근할 때 이용된다.
모든 클래스는 생성자가 존재하며, 하나 이상을 가질 수 있다.
클래스에 생성자 선언이 없으면 컴파일러는 다음과 같은 기본 생성자를 바이트코드 파일에 자동으로 추가시킨다.

그러나 개발자가 명시적으로 선언한 생성자가 있으면, 컴파일러는 기본 생성자를 추가하지 않는다.
생성자를 직접 선언할 때는, 매개값과 함께 객체의 초기화 코드를 작성할 수 있다.
이때 일반적으로 this라는 키워드를 사용하는데, this라는 것은 현재 객체의 데이터 필드를 접근한다.
이 this라는 키워드로, 생성자의 매개변수로 받은 데이터를 객체의 필드에 초기화 시킬 수 있다.

생성자 오버로딩이 많아질 경우 생성자 간의 중복 코드가 발생할 수 있다.
이때 this(...) 키워드로 한 생성자 내에서 다른 생성자를 호출하는 방식으로 중복 코드를 방지할 수 있다.
위에서 언급한 this 키워드와는 다른 것임을 인지하자.




























